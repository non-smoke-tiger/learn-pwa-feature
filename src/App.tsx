import { useEffect } from 'react';
import { SnackbarProvider } from 'notistack';

import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { th } from 'date-fns/locale';
// ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á vite-plugin-pwa
// eslint-disable-next-line import-x/no-unresolved
import { registerSW } from 'virtual:pwa-register';

import CssBaseline from '@mui/material/CssBaseline';

import TemplateContent from './components/TemplateContent';
import { AppThemeProvider } from './AppThemeContext';
import NotificationManager from './components/NotificationManager';

import './App.css';

function App() {
  async function subscribeUser() {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Service Worker ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
      console.error(
        'Service Workers or Push Manager are not supported in this browser.'
      );
      return;
    }

    // 2. ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á Notification üîî
    const permission = await Notification.requestPermission();

    if (permission !== 'granted') {
      // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (denied) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢ (default), ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      console.warn(
        'Notification permission was not granted. Cannot subscribe.'
      );

      // üí° ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ‡∏ó‡∏µ‡πà UI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
      return;
    }

    // 3. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Service Worker ‡πÅ‡∏•‡∏∞ Push Manager
    const registration = await navigator.serviceWorker.ready;

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Subscription
    const subscription = await registration.pushManager.getSubscription();

    if (subscription) {
      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏Ñ‡∏¢ Subscribe ‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ã‡πâ‡∏≥)
      console.log('Already subscribed:', JSON.stringify(subscription));
      // **‡∏™‡πà‡∏á subscription ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á Active**
    }

    // // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Subscription ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ Subscribe)
    // try {
    //   subscription = await registration.pushManager.subscribe({
    //     userVisibleOnly: true, // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏°‡∏≠
    //     applicationServerKey: 'YOUR_VAPID_PUBLIC_KEY', // <<< ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ VAPID
    //   });

    //   console.log('New subscription created:', JSON.stringify(subscription));
    //   // **‡∏™‡πà‡∏á subscription ‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å**
    // } catch (e) {
    //   // ‡∏°‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å VAPID Key ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
    //   console.error('Subscription failed:', e);
    // }
  }

  useEffect(() => {
    // 1. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Service Worker ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ registerSW ‡∏Å‡πá‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
    if (import.meta.env.PROD && 'serviceWorker' in navigator) {
      registerSW();
      console.log('Service Worker registered via PWA helper.');
    } else if ('serviceWorker' in navigator) {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î dev ‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      // ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ type: 'module'
      navigator.serviceWorker
        .register('/dev-sw.js?dev-sw', { type: 'module' })
        .then(() => console.log('Service Worker registered in DEV mode.'))
        .catch((err) => console.error('SW registration failed:', err));
    }
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component ‡∏ñ‡∏π‡∏Å Mount ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    subscribeUser();
  }, []);

  return (
    <AppThemeProvider>
      <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={th}>
        <CssBaseline />
        <SnackbarProvider
          maxSnack={5}
          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
        >
          <NotificationManager />
        </SnackbarProvider>
        <TemplateContent />
      </LocalizationProvider>
    </AppThemeProvider>
  );
}

export default App;
